package binary

/**
136. 只出现一次的数字
给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。
*/

/**

为了解决这个问题，我们可以使用位操作。特别是，我们可以使用异或操作。异或操作有一些特性，使得它在这种情况下非常有用：

1. 任何数和 0 做异或运算，结果仍然是原来的数，即 (a ^ 0 = a)
2. 任何数和其自身做异或运算，结果是 0，即 (a ^ a = 0)
3. 异或运算满足交换律和结合律，即 (a ^ b ^ a = a ^ a ^ b = 0 ^ b = b)
*/

// 解题的时候，可以举个例子，比如 1,2,2 就知道了
func singleNumber(nums []int) int {
    var result = 0
    for _, num := range nums {
        result ^= num
    }
    return result
}
